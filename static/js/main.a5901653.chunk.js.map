{"version":3,"sources":["assets/finalclip.mp4","App.js","serviceWorker.js","index.js"],"names":["module","exports","api","App","useState","query","setQuery","weather","setWeather","myWeatherIcon","className","autoPlay","muted","loop","style","position","width","left","top","height","objectFit","transform","zIndex","src","MyVideo","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","main","name","sys","country","d","currDay","getDay","currDate","getDate","currMonth","getMonth","currYear","getFullYear","dateBuilder","Date","WID","iconBuilder","id","Math","round","temp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,uC,uKCIrCC,EACA,mCADAA,EAEC,2CA+HQC,MA3Hf,WAAgB,IAAD,EAESC,mBAAS,IAFlB,mBAERC,EAFQ,KAEFC,EAFE,OAGaF,mBAAS,IAHtB,mBAGRG,EAHQ,KAGAC,EAHA,KAKRC,EACQ,kBADRA,EAEG,WAFHA,EAGA,mBAHAA,EAIA,UAJAA,EAKM,SALNA,EAMC,eANDA,EAOE,aAkDP,OACE,yBAAKC,UAAU,OAEb,2BAAOC,UAAQ,EAACC,OAAK,EAACC,MAAI,EAACC,MACzB,CACEC,SAAS,WACTC,MAAM,OACNC,KAAK,MACLC,IAAI,MACJC,OAAO,OACPC,UAAU,QACVC,UAAU,wBACVC,QAAQ,IAIR,4BAAQC,IAAKC,IAASC,KAAK,eAE/B,8BAGE,yBAAKf,UAAU,cACb,2BAAOe,KAAK,OACVf,UAAU,aACVgB,YAAY,sBACZC,SAAU,SAAAC,GAAC,OAAItB,EAASsB,EAAEC,OAAOC,QACjCA,MAAOzB,EACP0B,WA1EE,SAAAC,GACC,UAAVA,EAAIC,KACLC,MAAM,GAAD,OAAIhC,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDiC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACJ9B,EAAW8B,GACXhC,EAAS,IACTiC,QAAQC,IAAIjC,UAuEe,oBAAhBA,EAAQkC,KACjB,6BACE,yBAAK/B,UAAU,gBACb,yBAAKA,UAAU,YAAYH,EAAQmC,KAAnC,KAA2CnC,EAAQoC,IAAIC,SACvD,yBAAKlC,UAAU,QApEP,SAACmC,GACjB,IAEIC,EADO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC5DD,EAAEE,UAChBC,EAASH,EAAEI,UACXC,EAJS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAIvGL,EAAEM,YACnBC,EAAUP,EAAEQ,cAChB,MAAM,GAAN,OAAUP,EAAV,YAAqBE,EAArB,YAAiCE,EAAjC,YAA8CE,EAA9C,KA6D+BE,CAAY,IAAIC,QAEzC,yBAAK7C,UAAU,eACb,yBAAKA,UAAU,QACb,4BACA,uBAAGA,UAAS,aA/DR,SAAC8C,GAEjB,QAAO,GACL,KAAKA,GAAO,KAAOA,GAAO,IACxB,OAAO/C,EACT,KAAK+C,GAAO,KAAOA,GAAO,IACxB,OAAO/C,EACT,KAAK+C,GAAO,KAAOA,GAAO,IACxB,OAAO/C,EACT,KAAK+C,GAAO,KAAOA,GAAO,IACxB,OAAO/C,EACT,KAAK+C,GAAO,KAAOA,GAAO,IACxB,OAAO/C,EACT,KAAa,MAAR+C,EACH,OAAO/C,EACT,KAAK+C,GAAO,KAAOA,GAAO,IACxB,OAAO/C,EACT,QACE,OAAOA,GA+CGgD,CAAYlD,EAAQA,QAAQ,GAAGmD,IAFrB,gBAKZ,yBAAKhD,UAAU,WAAWH,EAAQA,QAAQ,GAAGkC,OAE1CkB,KAAKC,MAAMrD,EAAQkC,KAAKoB,MAT7B,WAgBC,MClHOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.a5901653.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/finalclip.42906aab.mp4\";","import React, { useState } from 'react';\nimport 'weather-icons/css/weather-icons.css';\nimport MyVideo from \"./assets/finalclip.mp4\";\n\nconst api ={\n  key:\"546334b60167af59b81cd38378b99450\",\n  base:\"https://api.openweathermap.org/data/2.5/\"\n};\n\n\nfunction App() {\n\nconst [query,setQuery] =useState('');\nconst [weather,setWeather] =useState({});\n\n const myWeatherIcon={\n  ThunderStorm:\"wi-thunderstorm\",\n  Drizzle:\"wi-sleet\",\n  Rain:\"wi-storm-showers\",\n  Snow:\"wi-snow\",\n  Atmosphere:\"wi-fog\",\n  Clear:\"wi-day-sunny\",\n  Clouds:\"wi-day-fog\"\n};\n\nconst search =evt=>{\n  if(evt.key===\"Enter\"){\n    fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n    .then(res=>res.json())\n    .then(result=>{\n      setWeather(result);\n      setQuery('');\n      console.log(weather);\n    })\n\n  }\n};\n\n\n  const dateBuilder=(d)=>{\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let currDay =days[d.getDay()];\n    let currDate=d.getDate();\n    let currMonth=months[d.getMonth()];\n    let currYear =d.getFullYear();\n    return `${currDay} ${currDate} ${currMonth} ${currYear} `;\n}\n\nconst iconBuilder=(WID)=>{\n\n  switch(true){\n    case WID >= 200 && WID <= 232:\n      return myWeatherIcon.ThunderStorm;\n    case WID >= 300 && WID <= 321:\n      return myWeatherIcon.Drizzle;\n    case WID >= 500 && WID <= 531:\n      return myWeatherIcon.Rain;\n    case WID >= 600 && WID <= 622:\n      return myWeatherIcon.Snow;\n    case WID >= 701 && WID <= 781:\n      return myWeatherIcon.Atmosphere;\n    case WID === 800:        \n      return myWeatherIcon.Clear;\n    case WID >= 801 && WID <= 804:\n      return myWeatherIcon.Clouds;\n    default:\n      return myWeatherIcon.Snow;\n  }\n}\n\n\n  return (\n    <div className=\"app\">\n\n      <video autoPlay muted loop style={\n        {\n          position:\"absolute\",\n          width:\"100%\",\n          left:\"50%\",\n          top:\"50%\",\n          height:\"100%\",\n          objectFit:\"cover\",\n          transform:\"translate(-50%, -50%)\",\n          zIndex:-1\n\n        }\n      }>\n          <source src={MyVideo} type=\"video/mp4\" />\n        </video>\n      <main>\n\n\n        <div className=\"search-box\">\n          <input type=\"text\" \n            className=\"search-bar\"\n            placeholder=\"Type your City Name\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}</div>\n          </div>\n          <div className=\"weather-box\">\n            <div className=\"temp\">\n              <h3>\n              <i className={`wi ${\n                \n                iconBuilder(weather.weather[0].id)\n                } display-1`}></i>\n\n              <div className=\"weather\">{weather.weather[0].main}</div>\n              </h3>\n                {Math.round(weather.main.temp)}Â°C\n\n            </div>\n         \n\n          </div>\n        </div>\n        ) : ('')}\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}